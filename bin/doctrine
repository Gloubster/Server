#!/usr/bin/env php
<?php

require_once __DIR__ . '/../vendor/autoload.php';

use Gloubster\Server\Application;
use Doctrine\ODM\MongoDB\Tools\Console\Helper\DocumentManagerHelper;
use Symfony\Component\Console\Application as ConsoleApplication;
use Doctrine\ODM\MongoDB\Version;
use Doctrine\ODM\MongoDB\Tools\Console\Command\Schema\CreateCommand;
use Doctrine\ODM\MongoDB\Tools\Console\Command\Schema\DropCommand;
use Doctrine\ODM\MongoDB\Tools\Console\Command\ClearCache\MetadataCommand;
use Doctrine\ODM\MongoDB\Tools\Console\Command\QueryCommand;
use Doctrine\ODM\MongoDB\Tools\Console\Command\GenerateRepositoriesCommand;
use Doctrine\ODM\MongoDB\Tools\Console\Command\GenerateProxiesCommand;
use Doctrine\ODM\MongoDB\Tools\Console\Command\GenerateHydratorsCommand;
use Doctrine\ODM\MongoDB\Tools\Console\Command\GenerateDocumentsCommand;

return call_user_func(function(){
    $Gloubster = new Application();

    $helpers = array(
        'dm' => new DocumentManagerHelper($Gloubster['doctrine.odm.mongodb.dm']),
    );

    $cli = new ConsoleApplication('Doctrine ODM MongoDB Command Line Interface', Version::VERSION);

    $cli->setCatchExceptions(true);

    $helperSet = $cli->getHelperSet();
    foreach ($helpers as $name => $helper) {
        $helperSet->set($helper, $name);
    }

    $cli->addCommands(array(
        new CreateCommand(),
        new DropCommand(),
        new MetadataCommand(),
        new QueryCommand(),
        new GenerateRepositoriesCommand(),
        new GenerateProxiesCommand(),
        new GenerateHydratorsCommand(),
        new GenerateDocumentsCommand(),
    ));

    return $cli->run();
});
